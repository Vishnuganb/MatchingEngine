services:
  postgres:
    image: postgres:latest
    container_name: matchingEnginePostgres
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    env_file:
      - compose/postgres.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.10-management-alpine
    ports:
    - "5672:5672" # AMQP protocol port
    - "15672:15672" # Management interface port

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    env_file:
      - compose/kafka.env
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092" ]
      interval: 20s
      timeout: 10s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  matching-engine:
    image: golang:1.24-alpine
    container_name: matchingEngineApp
    volumes:
      - ../:/app # Mount the project directory into the container
    working_dir: /app
    restart:
      unless-stopped
    env_file:
      - compose/common.env
    depends_on:
      - postgres
      - rabbitmq
      - kafka
    expose:
      - "8080:8080"
    entrypoint:
      - sh
      - -c
      - |
        set -x
        go install -buildvcs=false ./cmd/server
        until nc -z postgres 5432; do echo "waiting for postgres..."; sleep 1; done
        until nc -z rabbitmq 5672; do echo "waiting for rabbitmq..."; sleep 1; done
        #exchange server
        # setup air for live reload
        go install github.com/air-verse/air@latest
        air --build.cmd "go build -o ./tmp/main ./cmd/server" --build.bin "./tmp/main"

volumes:
  postgres-data: