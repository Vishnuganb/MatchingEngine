// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trades.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTrade = `-- name: CreateTrade :one
INSERT INTO trades (id, buyer_order_id, seller_order_id, qty, price, instrument)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, buyer_order_id, seller_order_id, qty, price, instrument
`

type CreateTradeParams struct {
	ID            string         `json:"id"`
	BuyerOrderID  string         `json:"buyer_order_id"`
	SellerOrderID string         `json:"seller_order_id"`
	Qty           pgtype.Numeric `json:"qty"`
	Price         pgtype.Numeric `json:"price"`
	Instrument    string         `json:"instrument"`
}

func (q *Queries) CreateTrade(ctx context.Context, arg CreateTradeParams) (Trade, error) {
	row := q.db.QueryRow(ctx, createTrade,
		arg.ID,
		arg.BuyerOrderID,
		arg.SellerOrderID,
		arg.Qty,
		arg.Price,
		arg.Instrument,
	)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.BuyerOrderID,
		&i.SellerOrderID,
		&i.Qty,
		&i.Price,
		&i.Instrument,
	)
	return i, err
}

const deleteTrade = `-- name: DeleteTrade :one
DELETE
FROM trades
WHERE id = $1 RETURNING id, buyer_order_id, seller_order_id, qty, price, instrument
`

func (q *Queries) DeleteTrade(ctx context.Context, id string) (Trade, error) {
	row := q.db.QueryRow(ctx, deleteTrade, id)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.BuyerOrderID,
		&i.SellerOrderID,
		&i.Qty,
		&i.Price,
		&i.Instrument,
	)
	return i, err
}

const getTrade = `-- name: GetTrade :one
SELECT id, buyer_order_id, seller_order_id, qty, price, instrument
FROM trades
WHERE id = $1
`

func (q *Queries) GetTrade(ctx context.Context, id string) (Trade, error) {
	row := q.db.QueryRow(ctx, getTrade, id)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.BuyerOrderID,
		&i.SellerOrderID,
		&i.Qty,
		&i.Price,
		&i.Instrument,
	)
	return i, err
}

const listTrades = `-- name: ListTrades :many
SELECT id, buyer_order_id, seller_order_id, qty, price, instrument
FROM trades
ORDER BY id
`

func (q *Queries) ListTrades(ctx context.Context) ([]Trade, error) {
	rows, err := q.db.Query(ctx, listTrades)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trade{}
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.BuyerOrderID,
			&i.SellerOrderID,
			&i.Qty,
			&i.Price,
			&i.Instrument,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrade = `-- name: UpdateTrade :one
UPDATE trades
SET buyer_order_id  = COALESCE($2, buyer_order_id),
    seller_order_id = COALESCE($3, seller_order_id),
    qty             = COALESCE($4, qty),
    price           = COALESCE($5, price),
    instrument      = COALESCE($6, instrument)
WHERE id = $1 RETURNING id, buyer_order_id, seller_order_id, qty, price, instrument
`

type UpdateTradeParams struct {
	ID            string         `json:"id"`
	BuyerOrderID  string         `json:"buyer_order_id"`
	SellerOrderID string         `json:"seller_order_id"`
	Qty           pgtype.Numeric `json:"qty"`
	Price         pgtype.Numeric `json:"price"`
	Instrument    string         `json:"instrument"`
}

func (q *Queries) UpdateTrade(ctx context.Context, arg UpdateTradeParams) (Trade, error) {
	row := q.db.QueryRow(ctx, updateTrade,
		arg.ID,
		arg.BuyerOrderID,
		arg.SellerOrderID,
		arg.Qty,
		arg.Price,
		arg.Instrument,
	)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.BuyerOrderID,
		&i.SellerOrderID,
		&i.Qty,
		&i.Price,
		&i.Instrument,
	)
	return i, err
}
