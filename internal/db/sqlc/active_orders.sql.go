// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: active_orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createActiveOrder = `-- name: CreateActiveOrder :one
INSERT INTO active_orders (id, side, order_qty, leaves_qty, price, instrument, cum_qty, type, order_status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id, side, order_qty, leaves_qty, price, instrument, type, cum_qty, order_status
`

type CreateActiveOrderParams struct {
	ID          string         `json:"id"`
	Side        string         `json:"side"`
	OrderQty    pgtype.Numeric `json:"order_qty"`
	LeavesQty   pgtype.Numeric `json:"leaves_qty"`
	Price       pgtype.Numeric `json:"price"`
	Instrument  string         `json:"instrument"`
	CumQty      pgtype.Numeric `json:"cum_qty"`
	Type        string         `json:"type"`
	OrderStatus string         `json:"order_status"`
}

func (q *Queries) CreateActiveOrder(ctx context.Context, arg CreateActiveOrderParams) (ActiveOrder, error) {
	row := q.db.QueryRow(ctx, createActiveOrder,
		arg.ID,
		arg.Side,
		arg.OrderQty,
		arg.LeavesQty,
		arg.Price,
		arg.Instrument,
		arg.CumQty,
		arg.Type,
		arg.OrderStatus,
	)
	var i ActiveOrder
	err := row.Scan(
		&i.ID,
		&i.Side,
		&i.OrderQty,
		&i.LeavesQty,
		&i.Price,
		&i.Instrument,
		&i.Type,
		&i.CumQty,
		&i.OrderStatus,
	)
	return i, err
}

const deleteActiveOrder = `-- name: DeleteActiveOrder :one
DELETE
FROM active_orders
WHERE id = $1 RETURNING id, side, order_qty, leaves_qty, price, instrument, type, cum_qty, order_status
`

func (q *Queries) DeleteActiveOrder(ctx context.Context, id string) (ActiveOrder, error) {
	row := q.db.QueryRow(ctx, deleteActiveOrder, id)
	var i ActiveOrder
	err := row.Scan(
		&i.ID,
		&i.Side,
		&i.OrderQty,
		&i.LeavesQty,
		&i.Price,
		&i.Instrument,
		&i.Type,
		&i.CumQty,
		&i.OrderStatus,
	)
	return i, err
}

const getActiveOrder = `-- name: GetActiveOrder :one
SELECT id, side, order_qty, leaves_qty, price, instrument, type, cum_qty, order_status
FROM active_orders
WHERE id = $1
`

func (q *Queries) GetActiveOrder(ctx context.Context, id string) (ActiveOrder, error) {
	row := q.db.QueryRow(ctx, getActiveOrder, id)
	var i ActiveOrder
	err := row.Scan(
		&i.ID,
		&i.Side,
		&i.OrderQty,
		&i.LeavesQty,
		&i.Price,
		&i.Instrument,
		&i.Type,
		&i.CumQty,
		&i.OrderStatus,
	)
	return i, err
}

const listActiveOrders = `-- name: ListActiveOrders :many
SELECT id, side, order_qty, leaves_qty, price, instrument, type, cum_qty, order_status
FROM active_orders
ORDER BY id
`

func (q *Queries) ListActiveOrders(ctx context.Context) ([]ActiveOrder, error) {
	rows, err := q.db.Query(ctx, listActiveOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActiveOrder{}
	for rows.Next() {
		var i ActiveOrder
		if err := rows.Scan(
			&i.ID,
			&i.Side,
			&i.OrderQty,
			&i.LeavesQty,
			&i.Price,
			&i.Instrument,
			&i.Type,
			&i.CumQty,
			&i.OrderStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActiveOrder = `-- name: UpdateActiveOrder :one
UPDATE active_orders
SET type         = COALESCE($2, type),
    leaves_qty   = COALESCE($3, leaves_qty),
    cum_qty     = COALESCE($4, cum_qty),
    order_status = COALESCE($5, order_status)
WHERE id = $1 RETURNING id, side, order_qty, leaves_qty, price, instrument, type, cum_qty, order_status
`

type UpdateActiveOrderParams struct {
	ID          string         `json:"id"`
	Type        pgtype.Text    `json:"type"`
	LeavesQty   pgtype.Numeric `json:"leaves_qty"`
	CumQty      pgtype.Numeric `json:"cum_qty"`
	OrderStatus pgtype.Text    `json:"order_status"`
}

func (q *Queries) UpdateActiveOrder(ctx context.Context, arg UpdateActiveOrderParams) (ActiveOrder, error) {
	row := q.db.QueryRow(ctx, updateActiveOrder,
		arg.ID,
		arg.Type,
		arg.LeavesQty,
		arg.CumQty,
		arg.OrderStatus,
	)
	var i ActiveOrder
	err := row.Scan(
		&i.ID,
		&i.Side,
		&i.OrderQty,
		&i.LeavesQty,
		&i.Price,
		&i.Instrument,
		&i.Type,
		&i.CumQty,
		&i.OrderStatus,
	)
	return i, err
}
