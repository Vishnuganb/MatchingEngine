// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: executions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExecution = `-- name: CreateExecution :one
INSERT INTO executions (id, order_id, side, order_qty, leaves_qty, price, instrument, cum_qty, exec_type, order_status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, order_id, side, order_qty, leaves_qty, price, instrument, exec_type, cum_qty, order_status
`

type CreateExecutionParams struct {
	ID          string         `json:"id"`
	OrderID     string         `json:"order_id"`
	Side        string         `json:"side"`
	OrderQty    pgtype.Numeric `json:"order_qty"`
	LeavesQty   pgtype.Numeric `json:"leaves_qty"`
	Price       pgtype.Numeric `json:"price"`
	Instrument  string         `json:"instrument"`
	CumQty      pgtype.Numeric `json:"cum_qty"`
	ExecType    string         `json:"exec_type"`
	OrderStatus string         `json:"order_status"`
}

func (q *Queries) CreateExecution(ctx context.Context, arg CreateExecutionParams) (Execution, error) {
	row := q.db.QueryRow(ctx, createExecution,
		arg.ID,
		arg.OrderID,
		arg.Side,
		arg.OrderQty,
		arg.LeavesQty,
		arg.Price,
		arg.Instrument,
		arg.CumQty,
		arg.ExecType,
		arg.OrderStatus,
	)
	var i Execution
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Side,
		&i.OrderQty,
		&i.LeavesQty,
		&i.Price,
		&i.Instrument,
		&i.ExecType,
		&i.CumQty,
		&i.OrderStatus,
	)
	return i, err
}

const deleteExecution = `-- name: DeleteExecution :one
DELETE
FROM executions
WHERE id = $1 RETURNING id, order_id, side, order_qty, leaves_qty, price, instrument, exec_type, cum_qty, order_status
`

func (q *Queries) DeleteExecution(ctx context.Context, id string) (Execution, error) {
	row := q.db.QueryRow(ctx, deleteExecution, id)
	var i Execution
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Side,
		&i.OrderQty,
		&i.LeavesQty,
		&i.Price,
		&i.Instrument,
		&i.ExecType,
		&i.CumQty,
		&i.OrderStatus,
	)
	return i, err
}

const getExecution = `-- name: GetExecution :one
SELECT id, order_id, side, order_qty, leaves_qty, price, instrument, exec_type, cum_qty, order_status
FROM executions
WHERE id = $1
`

func (q *Queries) GetExecution(ctx context.Context, id string) (Execution, error) {
	row := q.db.QueryRow(ctx, getExecution, id)
	var i Execution
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Side,
		&i.OrderQty,
		&i.LeavesQty,
		&i.Price,
		&i.Instrument,
		&i.ExecType,
		&i.CumQty,
		&i.OrderStatus,
	)
	return i, err
}

const listExecutions = `-- name: ListExecutions :many
SELECT id, order_id, side, order_qty, leaves_qty, price, instrument, exec_type, cum_qty, order_status
FROM executions
ORDER BY id
`

func (q *Queries) ListExecutions(ctx context.Context) ([]Execution, error) {
	rows, err := q.db.Query(ctx, listExecutions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Execution{}
	for rows.Next() {
		var i Execution
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Side,
			&i.OrderQty,
			&i.LeavesQty,
			&i.Price,
			&i.Instrument,
			&i.ExecType,
			&i.CumQty,
			&i.OrderStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExecution = `-- name: UpdateExecution :one
UPDATE executions
SET exec_type         = COALESCE($2, exec_type),
    leaves_qty   = COALESCE($3, leaves_qty),
    cum_qty     = COALESCE($4, cum_qty),
    price        = COALESCE($5, price),
    order_status = COALESCE($6, order_status)
WHERE id = $1 RETURNING id, order_id, side, order_qty, leaves_qty, price, instrument, exec_type, cum_qty, order_status
`

type UpdateExecutionParams struct {
	ID          string         `json:"id"`
	ExecType    pgtype.Text    `json:"exec_type"`
	LeavesQty   pgtype.Numeric `json:"leaves_qty"`
	CumQty      pgtype.Numeric `json:"cum_qty"`
	Price       pgtype.Numeric `json:"price"`
	OrderStatus pgtype.Text    `json:"order_status"`
}

func (q *Queries) UpdateExecution(ctx context.Context, arg UpdateExecutionParams) (Execution, error) {
	row := q.db.QueryRow(ctx, updateExecution,
		arg.ID,
		arg.ExecType,
		arg.LeavesQty,
		arg.CumQty,
		arg.Price,
		arg.OrderStatus,
	)
	var i Execution
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Side,
		&i.OrderQty,
		&i.LeavesQty,
		&i.Price,
		&i.Instrument,
		&i.ExecType,
		&i.CumQty,
		&i.OrderStatus,
	)
	return i, err
}
